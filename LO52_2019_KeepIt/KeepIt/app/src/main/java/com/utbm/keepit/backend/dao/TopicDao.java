package com.utbm.keepit.backend.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.utbm.keepit.backend.entity.JoinTopicExercise;

import com.utbm.keepit.backend.entity.Topic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC".
*/
public class TopicDao extends AbstractDao<Topic, Long> {

    public static final String TABLENAME = "TOPIC";

    /**
     * Properties of entity Topic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TopicName = new Property(1, String.class, "topicName", false, "TOPIC_NAME");
        public final static Property ImagePath = new Property(2, String.class, "imagePath", false, "IMAGE_PATH");
    }

    private DaoSession daoSession;

    private Query<Topic> exercise_ListTopicQuery;

    public TopicDao(DaoConfig config) {
        super(config);
    }
    
    public TopicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOPIC_NAME\" TEXT UNIQUE ," + // 1: topicName
                "\"IMAGE_PATH\" TEXT);"); // 2: imagePath
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TOPIC__id_TOPIC_NAME ON \"TOPIC\"" +
                " (\"_id\" ASC,\"TOPIC_NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Topic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(2, topicName);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Topic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(2, topicName);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
    }

    @Override
    protected final void attachEntity(Topic entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Topic readEntity(Cursor cursor, int offset) {
        Topic entity = new Topic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // topicName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // imagePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Topic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTopicName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Topic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Topic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Topic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listTopic" to-many relationship of Exercise. */
    public List<Topic> _queryExercise_ListTopic(Long exerciseId) {
        synchronized (this) {
            if (exercise_ListTopicQuery == null) {
                QueryBuilder<Topic> queryBuilder = queryBuilder();
                queryBuilder.join(JoinTopicExercise.class, JoinTopicExerciseDao.Properties.TopicId)
                    .where(JoinTopicExerciseDao.Properties.ExerciseId.eq(exerciseId));
                exercise_ListTopicQuery = queryBuilder.build();
            }
        }
        Query<Topic> query = exercise_ListTopicQuery.forCurrentThread();
        query.setParameter(0, exerciseId);
        return query.list();
    }

}
