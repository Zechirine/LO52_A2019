package com.utbm.keepit.backend.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.utbm.keepit.backend.entity.JoinSeanceExercise;

import com.utbm.keepit.backend.entity.Seance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEANCE".
*/
public class SeanceDao extends AbstractDao<Seance, Long> {

    public static final String TABLENAME = "SEANCE";

    /**
     * Properties of entity Seance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Duration = new Property(2, Integer.class, "duration", false, "DURATION");
        public final static Property Intensity = new Property(3, Integer.class, "intensity", false, "INTENSITY");
        public final static Property RepeatTimes = new Property(4, Integer.class, "repeatTimes", false, "REPEAT_TIMES");
    }

    private DaoSession daoSession;

    private Query<Seance> exercise_ListSeanceQuery;

    public SeanceDao(DaoConfig config) {
        super(config);
    }
    
    public SeanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DURATION\" INTEGER," + // 2: duration
                "\"INTENSITY\" INTEGER," + // 3: intensity
                "\"REPEAT_TIMES\" INTEGER);"); // 4: repeatTimes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Seance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(3, duration);
        }
 
        Integer intensity = entity.getIntensity();
        if (intensity != null) {
            stmt.bindLong(4, intensity);
        }
 
        Integer repeatTimes = entity.getRepeatTimes();
        if (repeatTimes != null) {
            stmt.bindLong(5, repeatTimes);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Seance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(3, duration);
        }
 
        Integer intensity = entity.getIntensity();
        if (intensity != null) {
            stmt.bindLong(4, intensity);
        }
 
        Integer repeatTimes = entity.getRepeatTimes();
        if (repeatTimes != null) {
            stmt.bindLong(5, repeatTimes);
        }
    }

    @Override
    protected final void attachEntity(Seance entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Seance readEntity(Cursor cursor, int offset) {
        Seance entity = new Seance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // intensity
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // repeatTimes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Seance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIntensity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRepeatTimes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Seance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Seance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Seance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listSeance" to-many relationship of Exercise. */
    public List<Seance> _queryExercise_ListSeance(Long exerciseId) {
        synchronized (this) {
            if (exercise_ListSeanceQuery == null) {
                QueryBuilder<Seance> queryBuilder = queryBuilder();
                queryBuilder.join(JoinSeanceExercise.class, JoinSeanceExerciseDao.Properties.SeanceId)
                    .where(JoinSeanceExerciseDao.Properties.ExerciseId.eq(exerciseId));
                exercise_ListSeanceQuery = queryBuilder.build();
            }
        }
        Query<Seance> query = exercise_ListSeanceQuery.forCurrentThread();
        query.setParameter(0, exerciseId);
        return query.list();
    }

}
