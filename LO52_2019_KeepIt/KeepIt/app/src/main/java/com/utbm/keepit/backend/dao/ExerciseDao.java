package com.utbm.keepit.backend.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.utbm.keepit.backend.entity.JoinSeanceExercise;
import com.utbm.keepit.backend.entity.JoinTopicExercise;

import com.utbm.keepit.backend.entity.Exercise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISE".
*/
public class ExerciseDao extends AbstractDao<Exercise, Long> {

    public static final String TABLENAME = "EXERCISE";

    /**
     * Properties of entity Exercise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TypePublic = new Property(2, int.class, "typePublic", false, "TYPE_PUBLIC");
        public final static Property LevelDifficult = new Property(3, int.class, "levelDifficult", false, "LEVEL_DIFFICULT");
        public final static Property LevelGroup = new Property(4, int.class, "levelGroup", false, "LEVEL_GROUP");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property ImageResource = new Property(6, String.class, "imageResource", false, "IMAGE_RESOURCE");
    }

    private DaoSession daoSession;

    private Query<Exercise> seance_ListExercisesQuery;
    private Query<Exercise> topic_ListExercisesQuery;

    public ExerciseDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"TYPE_PUBLIC\" INTEGER NOT NULL ," + // 2: typePublic
                "\"LEVEL_DIFFICULT\" INTEGER NOT NULL ," + // 3: levelDifficult
                "\"LEVEL_GROUP\" INTEGER NOT NULL ," + // 4: levelGroup
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"IMAGE_RESOURCE\" TEXT);"); // 6: imageResource
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTypePublic());
        stmt.bindLong(4, entity.getLevelDifficult());
        stmt.bindLong(5, entity.getLevelGroup());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String imageResource = entity.getImageResource();
        if (imageResource != null) {
            stmt.bindString(7, imageResource);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTypePublic());
        stmt.bindLong(4, entity.getLevelDifficult());
        stmt.bindLong(5, entity.getLevelGroup());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String imageResource = entity.getImageResource();
        if (imageResource != null) {
            stmt.bindString(7, imageResource);
        }
    }

    @Override
    protected final void attachEntity(Exercise entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Exercise readEntity(Cursor cursor, int offset) {
        Exercise entity = new Exercise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // typePublic
            cursor.getInt(offset + 3), // levelDifficult
            cursor.getInt(offset + 4), // levelGroup
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // imageResource
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exercise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypePublic(cursor.getInt(offset + 2));
        entity.setLevelDifficult(cursor.getInt(offset + 3));
        entity.setLevelGroup(cursor.getInt(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageResource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Exercise entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Exercise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Exercise entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listExercises" to-many relationship of Seance. */
    public List<Exercise> _querySeance_ListExercises(Long seanceId) {
        synchronized (this) {
            if (seance_ListExercisesQuery == null) {
                QueryBuilder<Exercise> queryBuilder = queryBuilder();
                queryBuilder.join(JoinSeanceExercise.class, JoinSeanceExerciseDao.Properties.ExerciseId)
                    .where(JoinSeanceExerciseDao.Properties.SeanceId.eq(seanceId));
                seance_ListExercisesQuery = queryBuilder.build();
            }
        }
        Query<Exercise> query = seance_ListExercisesQuery.forCurrentThread();
        query.setParameter(0, seanceId);
        return query.list();
    }

    /** Internal query to resolve the "listExercises" to-many relationship of Topic. */
    public List<Exercise> _queryTopic_ListExercises(Long topicId) {
        synchronized (this) {
            if (topic_ListExercisesQuery == null) {
                QueryBuilder<Exercise> queryBuilder = queryBuilder();
                queryBuilder.join(JoinTopicExercise.class, JoinTopicExerciseDao.Properties.ExerciseId)
                    .where(JoinTopicExerciseDao.Properties.TopicId.eq(topicId));
                topic_ListExercisesQuery = queryBuilder.build();
            }
        }
        Query<Exercise> query = topic_ListExercisesQuery.forCurrentThread();
        query.setParameter(0, topicId);
        return query.list();
    }

}
