package com.utbm.keepit.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.utbm.keepit.backend.entity.JoinTopicExercise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOIN_TOPIC_EXERCISE".
*/
public class JoinTopicExerciseDao extends AbstractDao<JoinTopicExercise, Void> {

    public static final String TABLENAME = "JOIN_TOPIC_EXERCISE";

    /**
     * Properties of entity JoinTopicExercise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TopicId = new Property(0, Long.class, "topicId", false, "TOPIC_ID");
        public final static Property ExerciseId = new Property(1, Long.class, "exerciseId", false, "EXERCISE_ID");
    }


    public JoinTopicExerciseDao(DaoConfig config) {
        super(config);
    }
    
    public JoinTopicExerciseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOIN_TOPIC_EXERCISE\" (" + //
                "\"TOPIC_ID\" INTEGER," + // 0: topicId
                "\"EXERCISE_ID\" INTEGER);"); // 1: exerciseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOIN_TOPIC_EXERCISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JoinTopicExercise entity) {
        stmt.clearBindings();
 
        Long topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindLong(1, topicId);
        }
 
        Long exerciseId = entity.getExerciseId();
        if (exerciseId != null) {
            stmt.bindLong(2, exerciseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JoinTopicExercise entity) {
        stmt.clearBindings();
 
        Long topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindLong(1, topicId);
        }
 
        Long exerciseId = entity.getExerciseId();
        if (exerciseId != null) {
            stmt.bindLong(2, exerciseId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public JoinTopicExercise readEntity(Cursor cursor, int offset) {
        JoinTopicExercise entity = new JoinTopicExercise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // topicId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // exerciseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JoinTopicExercise entity, int offset) {
        entity.setTopicId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExerciseId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(JoinTopicExercise entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(JoinTopicExercise entity) {
        return null;
    }

    @Override
    public boolean hasKey(JoinTopicExercise entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
